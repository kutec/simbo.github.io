/* =============================================================================
   Clearfix
   ========================================================================== */

.clearfix() {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}

/* =============================================================================
   Hide text
   ========================================================================== */

.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
}

.hide-text() {
    font: ~"0/0" a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
}

.zero-text() {
    font: ~"0/0" a;
}

.reset-text() {
    font-size: 1rem; // there are issues in IE10
    font-family: @font-family-base;
    line-height: @line-height-base;
}

/* =============================================================================
   Gradients with unlimited color-stops (ready to use with Autoprefixer)
   ========================================================================== */

#gradient {

    // Filter color-stop params
    .color-stops(@color-stops-N...) {
        @color-stops: ~`"@{arguments}".replace(/(^\[)|(\]$)/g,'')`;
    }

    // Creepy IE special treatment, fallback on first and last color-stop
    .ie-filter(@color-stops, @type) {
        filter: ~`(function(c,t){
            var a = c[0].split(/\s+/)[0].trim(),
                b = c.slice(-1)[0].trim().split(/\s+/)[0].trim();
            return "progid:DXImageTransform.Microsoft.gradient(startColorstr='"+a+"', endColorstr='"+b+"', GradientType="+t+")";
        })("@{color-stops}".split(','),@{type})`;
    }

    // Horizontal gradient, from left to right
    .horizontal(@color-stops-0: #555 0%, @color-stops-1: #333 100%, @color-stops-N...) {
        .color-stops(@arguments);
        background-image: linear-gradient(to right, @color-stops); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
        background-repeat: repeat-x;
        #gradient > .ie-filter(@color-stops; 1); // IE9 and down, gets no color-stop at all for proper fallback
    }

    // Vertical gradient, from top to bottom
    .vertical(@color-stops-0: #555 0%, @color-stops-1: #333 100%, @color-stops-N...) {
        .color-stops(@arguments);
        background-image: linear-gradient(to bottom, @color-stops); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
        background-repeat: repeat-x;
        #gradient > .ie-filter(@color-stops; 0); // IE9 and down, gets no color-stop at all for proper fallback
    }

    .directional(@deg: 45deg, @color-stops-0: #555 0%, @color-stops-1: #333 100%, @color-stops-N...) {
        .color-stops(@arguments);
        background-image: linear-gradient(@deg, @color-stops); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
        background-repeat: repeat-x;
    }

    .radial(@color-stops-0: #555 0%, @color-stops-1: #333 100%, @color-stops-N...) {
        .color-stops(@arguments);
        background-image: radial-gradient(circle, @color-stops);
        background-repeat: no-repeat;
    }

    .striped(@angle: 45deg; @color: rgba(255,255,255,.15)) {
        #gradient > .directional(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
        background-repeat: repeat;
    }

}

/* =============================================================================
   Media queries for different screen sizes
   ========================================================================== */

// xs only
.screen-xs(@rules) {
    @media (max-width: @screen-xs-max) { @rules(); }
}

// sm and larger
.screen-sm-min(@rules) {
    @media (min-width: @screen-sm-min) { @rules(); }
}

// sm only
.screen-sm(@rules) {
    @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) { @rules(); }
}

// sm and smaller
.screen-sm-max(@rules) {
    @media (max-width: @screen-sm-max) { @rules(); }
}

// md and larger
.screen-md-min(@rules) {
    @media (min-width: @screen-md-min) { @rules(); }
}

// md only
.screen-md(@rules) {
    @media (min-width: @screen-md-min) and (max-width: @screen-md-max) { @rules(); }
}

// md and smaller
.screen-md-max(@rules) {
    @media (max-width: @screen-md-max) { @rules(); }
}

// lg and larger
.screen-lg-min(@rules) {
    @media (min-width: @screen-lg-min) { @rules(); }
}

// lg only
.screen-lg(@rules) {
    @media (min-width: @screen-lg-min) and (max-width: @screen-lg-max) { @rules(); }
}

// lg and smaller
.screen-lg-max(@rules) {
    @media (max-width: @screen-lg-max) { @rules(); }
}

// xl and larger
.screen-xl(@rules) {
    @media (min-width: @screen-xl-min) { @rules(); }
}

// 1: xs only, 2: sm and larger
.screen(@rules-xs, @rules-sm) {
    .screen-xs(@rules-xs);
    .screen-sm-min(@rules-sm);
}

// 1: xs only, 2: sm only, 3: md and larger
.screen(@rules-xs, @rules-sm, @rules-md) {
    .screen-xs(@rules-xs);
    .screen-sm(@rules-sm);
    .screen-md-min(@rules-md);
}

// 1: xs only, 2: sm only, 3: md only, 4: lg and larger
.screen(@rules-xs, @rules-sm, @rules-md, @rules-lg) {
    .screen-xs(@rules-xs);
    .screen-sm(@rules-sm);
    .screen-md(@rules-md);
    .screen-lg-min(@rules-lg);
}

// 1: xs only, 2: sm only, 3: md only, 4: lg only, 5: xl and larger
.screen(@rules-xs, @rules-sm, @rules-md, @rules-lg, @rules-xl) {
    .screen-xs(@rules-xs);
    .screen-sm(@rules-sm);
    .screen-md(@rules-md);
    .screen-lg(@rules-lg);
    .screen-xl(@rules-xl);
}
